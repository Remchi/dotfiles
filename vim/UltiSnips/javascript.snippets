snippet ccom "Class React Component" bA
import React from 'react';

class ${1:`!p snip.rv = snip.basename`} extends React.Component {
	render() {
		return (
			<div>
				$0
			</div>
		);
	}
}

export default $1;
endsnippet


snippet fcom "Functional Component" bA
import React from 'react';

const ${1:`!p snip.rv = snip.basename`} = () => (
	<div>
		$0
	</div>
)

export default $1;
endsnippet

snippet nimp "Import" bA
import $1 from '$2';$0
endsnippet
snippet impr "React import" bA
import React from 'react';$0
endsnippet
snippet impl "Lodash import" bA
import _ from 'lodash';$0
endsnippet
snippet impp "Import prop types" bA
import PropTypes from 'prop-types';$0
endsnippet
snippet impc "Import Connect" bA
import { connect } from 'react-redux';$0
endsnippet

snippet rred "Reducer definition" bA
export default function ${1:`!p snip.rv = snip.basename`}(state = {}, action = {}) {
	switch(action.type) {
		default: return state;
	}
}$0
endsnippet

snippet rthunk "Redux Thunk Action" bA
export const $1 = (${2:data}) => (${3:dispatch}) => $0
endsnippet

snippet cdm "componentDidMount" bA
componentDidMount() {
	$0
}
endsnippet

snippet "rconst (.*)" "Redux Action Type Constant" br
export const `!p snip.rv = match.group(1).upper().replace(' ', '_')` = "`!p snip.rv = match.group(1).upper().replace(' ', '_')`";$0
endsnippet

snippet pts "React Prop Types String" A
PropTypes.string.isRequired
endsnippet

snippet ptf "React Prop Types Function" A
PropTypes.func.isRequired
endsnippet

snippet ptb "React Prop Types Boolean" A
PropTypes.bool.isRequired
endsnippet

snippet pth "React Prop Types Shape" A
PropTypes.shape({$0}).isRequired
endsnippet

snippet ptn "React Prop Number" A
PropTypes.number.isRequired
endsnippet

snippet ptao "React Prop Types Array of Objects" A
PropTypes.arrayOf(PropTypes.object).isRequired
endsnippet

snippet ptdef "React Prop Types Define" bA
${1:`!p snip.rv = snip.basename`}.propTypes = {
	$0
}
endsnippet

snippet pttdef "React Prop Types Default" bA
${1:`!p snip.rv = snip.basename`}.defaultProps = {
	$0
}
endsnippet


snippet eroute "Express Route" bA
const express = require('express');

let router = express.Router();

$0

module.exports = router;
endsnippet

snippet ereq "Express Endpoint" bA
router.${1:get}('${2:/}', async (req, res) => {
	$0
});
endsnippet

snippet cn "className" A
className="$0"
endsnippet

snippet emod "Mongoose Model" bA
import mongoose from "mongoose";

const schema = new mongoose.Schema({$0});

export default mongoose.model(${1:`!p snip.rv = re.sub('\.js$', '', fn)`}, schema);
endsnippet

snippet rmap "mapStateToProps" bA
function mapStateToProps(state) {
	return {$0}
}
endsnippet

snippet c
connect(${1:mapStateToProps}${2:, ${3:dispatch}})(${VISUAL})$0
endsnippet

snippet fsub "Form onSubmit" bA
onSubmit = e => {
	e.preventDefault();
	const errors = this.validate(this.state.data);
	this.setState({ errors });
	if (Object.keys(errors).length === 0) {
		this.setState({ loading: true });
		this.props
			.submit(this.state.data)
			.catch(err =>
				this.setState({ errors: err.response.data.errors, loading: false })
			);
	}
};
endsnippet

snippet fval "Form Validate" bA
validate = data => {
	const errors = {};
	$0
	return errors;
};
endsnippet

snippet fcha "Form onChange" bA
onChangeString = e => {
	this.setState({
		data: { ...this.state.data, [e.target.name]: e.target.value }
	});
};
endsnippet


snippet ract "Redux action" bA
export const ${1:action} = payload => ({
  type: ${2:type},
  payload
});$0
endsnippet


snippet nreq "Node Require" bA
const $1 = require('$2');$0
endsnippet

snippet kmig "Knex Migration: Create Table" bA
exports.up = knex => {
	return knex.schema.createTable("${1:tableName}", t => {
		t.increments();

		$0

		t.datetime("createdAt");
		t.datetime("updatedAt");
	});
}

exports.down = knex => knex.schema.dropTable("$1");
endsnippet

snippet vuexstore "Vuex Store template" bA
export default {
  state: {
    hash: {}
  },

  getters: {
    $1(state) {
      return Object.values(state.hash);
    }
  },

  mutations: {
    ADD_`!p snip.rv = t[1].upper()`(state, payload) {
      state.hash = { ...state.hash, ...payload };
    }
  },

  actions: {}
};
endsnippet

snippet obbase "Objection: Base Model" bA
const { Model } = require("objection");

class BaseModel extends Model {
  $beforeInsert() {
    const now = new Date().toISOString();
    this.createdAt = now;
    this.updatedAt = now;
  }

  $beforeUpdate() {
    this.updatedAt = new Date().toISOString();
  }
}

module.exports = BaseModel;
endsnippet

snippet obmod "Objection: Model" bA
const BaseModel = require("./BaseModel");

class ${1:`!p snip.rv = snip.basename`} extends BaseModel {
  static get tableName() {
		return "${2:`!p snip.rv = t[1][:1].lower() + t[1][1:] + "s"`}";
  }
}

module.exports = $1;
endsnippet

snippet obrel "Objection: Relationships method" bA
static get relationMappings() {
  return {
  };
}
endsnippet

snippet "obbelongs (.*)" "Objection: Belongs To Relationship" br
${1:`!p snip.rv = match.group(1)`}: {
  relation: BaseModel.BelongsToOneRelation,
  modelClass: `!p snip.rv = match.group(1)[:1].upper() + match.group(1)[1:]`,
  join: {
    from: "`!p snip.rv = snip.basename[:1].lower() + snip.basename[1:] + "s." + match.group(1) + "Id"`",
    to: "`!p snip.rv = match.group(1) + "s.id"`"
  }
}
endsnippet

snippet "obhasmany (.*)" "Objection: Has Many Relationship" br
${1:`!p snip.rv = match.group(1)`}: {
  relation: BaseModel.HasManyRelation,
  modelClass: `!p snip.rv = match.group(1)[:1].upper() + match.group(1)[1:-1]`,
  join: {
    from: "`!p snip.rv = snip.basename[:1].lower() + snip.basename[1:] + "s.id"`",
    to: "`!p snip.rv = match.group(1) + "." + snip.basename[:1].lower() + snip.basename[1:] + "Id"`"
  }
}
endsnippet

snippet "obmanytomany (.*)" "Objection: Many to Many Relationship" br
${1:`!p snip.rv = match.group(1)`}: {
  relation: BaseModel.ManyToManyRelation,
  modelClass: `!p snip.rv = match.group(1)[:1].upper() + match.group(1)[1:-1]`,
  join: {
    from: "`!p snip.rv = snip.basename[:1].lower() + snip.basename[1:] + "s.id"`",
    through: {
      from: "${1:joinTable}.`!p snip.rv = snip.basename[:1].lower() + snip.basename[1:] + "Id"`",
      to: "$1.`!p snip.rv = match.group(1)[:-1] + "Id"`"
    },
    to: "`!p snip.rv = match.group(1) + ".id"`"
  }
}
endsnippet

snippet fp "Arrow function" A
($1) => ${2:\{$0\}}
endsnippet

snippet fw "Empty arrow function" A
() => {
	$0
}
endsnippet

snippet "f (\w+)(.*)" "Function without function keyword" br
`!p snip.rv = match.group(1) + "(" + match.group(2).strip().replace(" ", ", ") + ")"` {
	$0
}
endsnippet

snippet "af (\w+)(.*)" "Function without function keyword" br
async `!p snip.rv = match.group(1) + "(" + match.group(2).strip().replace(" ", ", ") + ")"` {
	$0
}
endsnippet

snippet "F (\w+)(.*)" "Function without function keyword" br
`!p snip.rv = "function " + match.group(1) + "(" + match.group(2).strip().replace(" ", ", ") + ")"` {
	$0
}
endsnippet

snippet "a (\w+)(.*)" "Function without function keyword" br
`!p snip.rv = "const " + match.group(1) + " = (" + match.group(2).strip().replace(" ", ", ") + ") =>"` {
	$0
}
endsnippet

snippet "if (.*)" "If statement" br
if (`!p snip.rv = match.group(1)`) {
	$0
}
endsnippet

snippet trc "Wrap in try catch block"
try {
	${VISUAL}
} catch(err) {
	$0
}
endsnippet

snippet "-req (\w+) (\S+)" "Require" br
const `!p snip.rv = match.group(1)` = require("`!p snip.rv = match.group(2)`");$0
endsnippet

snippet "-imp (\w+) (\S+)" "Import" br
import `!p snip.rv = match.group(1)` from "`!p snip.rv = match.group(2)`";$0
endsnippet

snippet "-bimp (\S+) (\S+)" "Import" br
import { `!p snip.rv = match.group(1)` } from "`!p snip.rv = match.group(2)`";$0
endsnippet

snippet "pp (\S+) (.*)" "Permitted Params" br
const `!p snip.rv = match.group(1)`Data = _.pick(req.body.`!p snip.rv = match.group(1)`, ["`!p snip.rv = match.group(2).strip().replace(' ', '", "')`"]);
endsnippet

snippet rreqa "Import authenticate middleware" bA
const authenticate = require("../middlewares/authenticate");$0
endsnippet
snippet rreql "Import lodash" bA
const _ = require("lodash");$0
endsnippet

snippet rval "Validation template" bA
const errors = {};

$0

return { isValid: Object.keys(errors).length === 0, errors };
endsnippet
